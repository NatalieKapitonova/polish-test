"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkISODateFormat = exports.checkId = exports.checkInteger = exports.regexCheck = exports.passwordCheck = exports.checkUuid = exports.emailCheck = exports.isUUID = void 0;
var isEmail = function (email) {
    var emailRegex = /^[a-zA-Z0-9\.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i;
    var regexResult = email.match(emailRegex);
    if (!regexResult) {
        return false;
    }
    return regexResult.includes(email);
};
exports.isUUID = function (str, version) {
    if (version === void 0) { version = "all"; }
    var patterns = {
        3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
        4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
        5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
        all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
    };
    var pattern = patterns[version];
    return pattern && pattern.test(str);
};
exports.emailCheck = function (email) {
    var tEmail = email.trim();
    if (tEmail !== email) {
        return ["email must not contain any whitespace (before or after)"];
    }
    if (!isEmail(email)) {
        return ["email invalid"];
    }
};
exports.checkUuid = function (uuid) {
    if (!exports.isUUID(uuid)) {
        return ["uuid invalid"];
    }
};
exports.passwordCheck = function (password) {
    var r = [];
    if (password.length < 9) {
        r.push("password length smaller than 8");
    }
    return r.length > 0 ? r : undefined;
};
exports.regexCheck = function (s, regex) {
    var r = s.match(regex);
    if (r === null) {
        return ["regex " + regex + " not satisfied"];
    }
    return;
};
exports.checkInteger = function (s, allowNegatives) {
    if (allowNegatives === void 0) { allowNegatives = false; }
    if (!Number.isSafeInteger(s)) {
        return ["must be an integer"];
    }
    if (s < 0 && !allowNegatives) {
        return ["negative numbers are not accepted"];
    }
    return undefined;
};
exports.checkId = function (s) {
    var r = exports.checkInteger(s);
    if (r && r[0][0] === "n") {
        return ["id must be greater than 0"];
    }
    return r;
};
var monthW30Days = [4, 6, 9, 11];
exports.checkISODateFormat = function (s, options) {
    if (options === void 0) { options = {}; }
    var r = s.match(/^(\d{4})-(\d{2})-(\d{2})$/);
    if (r === null || r.length < 4) {
        return ['date format not accepted, please pass YYYY-MM-DD'];
    }
    var year = r[1], month = r[2], day = r[3];
    var iDay = parseInt(day);
    var iMonth = parseInt(month);
    var iYear = parseInt(year);
    var errors = [];
    var _a = options.yearMin, yearMin = _a === void 0 ? 1900 : _a, _b = options.yearMax, yearMax = _b === void 0 ? 2300 : _b;
    if (iDay < 1) {
        errors.push('day must be greater than zero');
    }
    if (iMonth < 1) {
        errors.push('month must be greater than zero');
    }
    if (iMonth > 12) {
        errors.push('month must be smaller than 12');
    }
    if (iYear < yearMin) {
        errors.push('year must be greater than ' + yearMin);
    }
    if (iYear > yearMax) {
        errors.push('year must be smaller than ' + yearMax);
    }
    var isLeapYear = Math.abs(1988 - iYear) % 4 === 0;
    if (iMonth === 2) {
        if (!isLeapYear && iDay > 28) {
            errors.push('day must be smaller than 28 (feburary)');
        }
        if (isLeapYear && iDay > 29) {
            errors.push('day must be smaller than 29 (february and leap year)');
        }
    }
    else if (monthW30Days.includes(iMonth)) {
        errors.push("day must be smaller than 30 (month of " + iMonth + ")");
    }
    else if (iDay > 31) {
        errors.push('day must be smaller than 31');
    }
    if (errors.length > 0) {
        return errors;
    }
    return undefined;
};
