import * as T from "./type";
export declare const checkField: (value: any, optional?: boolean, extraCheck?: ((s: string) => string[] | undefined) | undefined, fieldType?: T.FieldType, errorLabel?: string, allowEmptyString?: boolean) => string[] | undefined;
export declare const isShapeType: (s: T.ShapeCore | T.Shape) => s is T.Shape;
export declare const checkObject: (input: any, shape: T.Shape, errorsIfExtraAttribute?: boolean) => T.Error | T.ErrorOut;
export declare const displayErrors: (err: T.Error | T.ErrorOut, ctx: any, statusCode?: number) => void;
export declare const isShapeMiddleware: (shape: T.Shape, errorsIfExtraAttribute?: boolean) => (ctx: any, next: any) => Promise<void>;
export declare const isShape: <A = any>(shape: T.Shape, body: any, ctx: any) => body is A;
export declare const isUuid: (ctx: any, next: any) => Promise<void>;
export declare const isId: (ctx: any, next: any) => Promise<void>;
