import React from 'react';
// id1 is a placeholder, else does not compile
const ListUnit = (UnitUI) => ({ i, value, updatePromise }) => {
    const [isChecked, setChecked] = React.useState(!!value.assigned);
    const [isLoading, setLoading] = React.useState(false);
    const [assigned, setAssigned] = React.useState(value.assigned);
    const handleClick = () => {
        if (isLoading === true) {
            console.warn('this action is blocked since the promise is still working');
        }
        setLoading(true);
        updatePromise(value.id, assigned).then(x => {
            setChecked(!isChecked);
            setLoading(false);
            // we check if the answer (this is a hack because Koa does not return `null`)
            setAssigned(Boolean(x));
        });
    };
    return (React.createElement(UnitUI, { isChecked: isChecked, onChange: handleClick, isLoading: isLoading, label: value.name }));
};
const ListAssign = (ListWrapperUI, UnitUI) => {
    const ListUnitUI = ListUnit(UnitUI);
    return ({ data, updatePromise }) => {
        return (React.createElement(ListWrapperUI, null, data.map((value, i) => (React.createElement(ListUnitUI, { key: i, i: i, value: value, updatePromise: updatePromise })))));
    };
};
export default ListAssign;
