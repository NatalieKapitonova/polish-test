/// <reference types="react" />
import { Render } from "../view";
export declare type FormErrorsGeneric<A> = {
    [k in keyof A]?: string[];
};
export interface FormUIProps<FormShape> {
    loading: boolean;
    form: Partial<FormShape>;
    errors: FormErrorsGeneric<FormShape>;
    options: {
        [k in keyof FormShape]?: {
            id: number | string;
            name: string;
        }[];
    };
    setForm: (f: Partial<FormShape>) => void;
}
export interface InputProps<A> {
    value?: A;
    onChange: (a: A) => void;
    errors?: string[];
    disabled?: boolean;
    placeholder?: string;
}
export interface InputOptionsProps<A> extends InputProps<A> {
    options: {
        id: A;
        name: string;
    }[];
}
export interface InputWrapperProps {
    label?: string;
    children: JSX.Element;
    errors?: string[];
}
export declare enum FormUIType {
    Number = 0,
    Text = 1,
    Textarea = 2,
    Select = 3,
    SelectObject = 4,
    Switch = 5
}
export interface StructureUnitCore<A> {
    name: keyof A;
    label?: string;
}
export interface FormDef<A> extends StructureUnitCore<A> {
    uiType: FormUIType;
    optional: boolean;
    disabled?: boolean;
}
export interface FormViewDef<A> extends FormDef<A> {
    render?: Render<A>;
}
