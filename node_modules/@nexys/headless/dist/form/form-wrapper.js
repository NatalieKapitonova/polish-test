// generic wrapper for forms, see args below for details
import React from 'react';
import * as Validation from '@nexys/validation';
import { isA } from './utils';
/**
 * @type FormShape: shape of the form
 * @param FormUI : UI for the form, must respect FormUIProps
 * @param shape : validation shape
 * @param asyncCall [optional]: async call, typically backend
 * @param onSuccess [optional]: after call to the backend, action
 */
const FormWrapper = (FormUI, shape, asyncCall, { resetAfterSubmit = true } = {}) => ({ data = { options: {}, dataIn: {} }, onSuccess, onErrors }) => {
    const [form, setForm] = React.useState(data.dataIn);
    const [errors, setErrors] = React.useState({});
    const [loading, setLoading] = React.useState(false);
    const handleSubmit = async (e) => {
        e.preventDefault();
        const validation = Validation.Main.checkObject(form, shape);
        setErrors(validation);
        if (isA(form, validation)) {
            // here call the backend
            setLoading(true);
            try {
                const out = asyncCall && (await asyncCall(form));
                setLoading(false);
                resetAfterSubmit && setForm({}); // this lines comes before onSuccess, else it creates an error/warning
                onSuccess && onSuccess(form, out);
            }
            catch (err) {
                if (onErrors) {
                    const { errors } = onErrors(err, form);
                    if (errors) {
                        setErrors(errors);
                        setLoading(false);
                    }
                }
            }
        }
    };
    return (React.createElement("form", { onSubmit: handleSubmit },
        React.createElement(FormUI, { loading: loading, errors: errors, form: form, setForm: setForm, options: data.options || {} })));
};
export default FormWrapper;
