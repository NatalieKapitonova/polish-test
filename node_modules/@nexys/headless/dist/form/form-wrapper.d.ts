/// <reference types="react" />
import * as T from './type';
import * as Validation from '@nexys/validation';
export interface FormWrapperProps<A, Out> {
    data?: {
        dataIn: Partial<A>;
        options?: {
            [k in keyof A]?: {
                id: number | string;
                name: string;
            }[];
        };
    };
    onSuccess?: (data: A, out?: Out) => void;
    onErrors?: (err: any, data: A) => {
        errors?: T.FormErrorsGeneric<A>;
    };
}
/**
 * @type FormShape: shape of the form
 * @param FormUI : UI for the form, must respect FormUIProps
 * @param shape : validation shape
 * @param asyncCall [optional]: async call, typically backend
 * @param onSuccess [optional]: after call to the backend, action
 */
declare const FormWrapper: <FormShape, Out = any>(FormUI: (props: T.FormUIProps<FormShape>) => JSX.Element, shape: Validation.Type.Shape, asyncCall?: ((data: FormShape) => Promise<Out>) | undefined, { resetAfterSubmit }?: {
    resetAfterSubmit?: boolean | undefined;
}) => ({ data, onSuccess, onErrors }: FormWrapperProps<FormShape, Out>) => JSX.Element;
export default FormWrapper;
