import { DefinitionItem, Filter, FiltersType } from '../../types';
import { PropFiltersType } from '../../types/config';
export declare const compareString: (main: string, searchString: string) => boolean;
export declare type FilterSearchValue = string | number | boolean;
export declare const toFilterArray: <A>(filters: { [k in keyof A]?: FilterSearchValue | undefined; }) => FilterUnit<A>[];
export declare const compare: (main: any, search: string | number | boolean) => boolean;
export declare const searchInObject: (searchString: string, object: any) => boolean;
export declare const searchInObjectLinear: (searchString: string, object: any) => boolean;
export declare type FilterFunc<A> = (d: A, searchValue: any[], filtersObj?: FiltersType<A>) => boolean;
export declare type FilterUnit<A> = {
    name: keyof A | 'globalSearch';
    value: string | number | boolean | {
        value: any;
        func: FilterFunc<A>;
    };
};
export declare const applyFilter: <A>(data: A[], filters: FiltersType<A>) => A[];
export declare const addRemoveToArray: <T = any>(v: T, a?: T[]) => T[];
export declare const updateFilters: <A>(filters: any, v: {
    name: "globalSearch" | "id" | "uuid" | keyof A;
    value: any;
    type?: string | undefined;
}) => FiltersType<A>;
export declare const getFilterObj: <A>(def: DefinitionItem<A>[], filterAttribute: keyof A) => keyof A | Filter<A>;
export declare const transformFilterPropToStateFilter: <A>(def: DefinitionItem<A>[], filters: PropFiltersType<A>) => FiltersType<A>;
export declare const debounce: (wait?: number) => (func: () => void) => void;
