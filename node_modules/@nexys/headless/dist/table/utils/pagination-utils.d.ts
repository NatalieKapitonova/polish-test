/**
 * get the number of pages
 * @param  {[type]} n        total number of rows
 * @param  {[type]} nPerPage number of rows per page
 * @return {[type]}          number of pages
 */
export declare const getNPage: (n: number, nPerPage: number) => number;
interface GetPaginationReturn {
    idx: number;
    nPerPage: number;
    nPage: number;
}
export declare const getPagination: (n: number, nPerPageIn: number) => GetPaginationReturn;
/**
 * get list of page based on the index (-i means that there's a gap - we do not use null so that it can than be used as an index)
 * @param  {[type]} idx   the page on which the user id
 * @param  {[type]} nPage the total amount of pages
 * @return {[type]}       [1, null, idx - 1, idx, idx + 1, null, nPage]
 */
export declare const getPageTiles: (idx: number, nPage: number) => any[];
export declare const paginationBoundaries: (idx: number, nPerPage: number) => {
    start: number;
    end: number;
};
export declare const withPagination: <A>(data: A[], idx: number, nPerPage: number) => A[];
export {};
